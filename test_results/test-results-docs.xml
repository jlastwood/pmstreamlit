<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="PC70601" name="pytest" skipped="1" tests="38" time="2.242" timestamp="2019-10-23T05:10:45.702869"><testcase classname="tests.test_platform" file="tests\test_platform.py" line="5" name="test_64bit" time="0.000"></testcase><testcase classname="tests.test_platform" file="tests\test_platform.py" line="10" name="test_python_version" time="0.000"></testcase><testcase classname="tests.package.experiments.test_hello_world" file="tests\package\experiments\test_hello_world.py" line="4" name="test_awesome_streamlit_experiments_write_hello_world" time="0.003"></testcase><testcase classname="package.tests.test_package_imports" file="package\tests\test_package_imports.py" line="22" name="test_write_hello_world" time="0.003"></testcase><testcase classname="package.tests.core.test_services" file="package\tests\core\test_services.py" line="8" name="test_get_file_content_as_string" time="0.017"><failure message="UnicodeDecodeError: &apos;charmap&apos; codec can&apos;t decode byte 0x9d in position 97: character maps to &lt;undefined&gt;">def get_or_set_cache():
        hasher = hashlib.new(&quot;md5&quot;)
    
        args_hasher = CodeHasher(&quot;md5&quot;, hasher)
        args_hasher.update([args, kwargs])
        LOGGER.debug(&quot;Hashing arguments to %s of %i bytes.&quot;, name, args_hasher.size)
    
        args_digest_before = args_hasher.digest()
    
        code_hasher = CodeHasher(&quot;md5&quot;, hasher)
        code_hasher.update(func)
        LOGGER.debug(&quot;Hashing function %s in %i bytes.&quot;, name, code_hasher.size)
    
        key = hasher.hexdigest()
        LOGGER.debug(&quot;Cache key: %s&quot;, key)
    
        caller_frame = inspect.currentframe().f_back
        try:
            return_value, args_mutated = _read_from_cache(
&gt;               key, persist, ignore_hash, func, caller_frame
            )

.venv\lib\site-packages\streamlit\caching.py:518: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

key = &apos;5e29984b89f83ebacc335ccd56073cca&apos;, persisted = False, ignore_hash = False
func_or_code = &lt;function get_file_content_as_string at 0x000000243FB34F28&gt;
message_opts = &lt;frame at 0x000000243E92DA78, file &apos;c:\\repos\\private\\awesomestreamlit\\.venv\\lib\\site-packages\\streamlit\\caching.py&apos;, line 544, code wrapped_func&gt;

    def _read_from_cache(key, persisted, ignore_hash, func_or_code, message_opts):
        &quot;&quot;&quot;
        Read the value from the cache. Our goal is to read from memory
        if possible. If the data was mutated (hash changed), we show a
        warning. If reading from memory fails, we either read from disk
        or rerun the code.
        &quot;&quot;&quot;
        try:
            return _read_from_mem_cache(key, ignore_hash)
        except (CacheKeyNotFoundError, CachedObjectWasMutatedError) as e:
            if isinstance(e, CachedObjectWasMutatedError):
                if inspect.isroutine(func_or_code):
                    message = _build_caching_func_error_message(
                        persisted, func_or_code, message_opts
                    )
                else:
                    message = _build_caching_block_error_message(
                        persisted, func_or_code, message_opts
                    )
                st.warning(message)
    
            if persisted:
                value, args_mutated = _read_from_disk_cache(key)
                _write_to_mem_cache(key, value, ignore_hash, args_mutated)
                return value, args_mutated
&gt;           raise e

.venv\lib\site-packages\streamlit\caching.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

key = &apos;5e29984b89f83ebacc335ccd56073cca&apos;, persisted = False, ignore_hash = False
func_or_code = &lt;function get_file_content_as_string at 0x000000243FB34F28&gt;
message_opts = &lt;frame at 0x000000243E92DA78, file &apos;c:\\repos\\private\\awesomestreamlit\\.venv\\lib\\site-packages\\streamlit\\caching.py&apos;, line 544, code wrapped_func&gt;

    def _read_from_cache(key, persisted, ignore_hash, func_or_code, message_opts):
        &quot;&quot;&quot;
        Read the value from the cache. Our goal is to read from memory
        if possible. If the data was mutated (hash changed), we show a
        warning. If reading from memory fails, we either read from disk
        or rerun the code.
        &quot;&quot;&quot;
        try:
&gt;           return _read_from_mem_cache(key, ignore_hash)

.venv\lib\site-packages\streamlit\caching.py:381: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

key = &apos;5e29984b89f83ebacc335ccd56073cca&apos;, ignore_hash = False

    def _read_from_mem_cache(key, ignore_hash):
        if key in _mem_cache:
            entry = _mem_cache[key]
    
            if ignore_hash or get_hash(entry.value) == entry.hash:
                LOGGER.debug(&quot;Memory cache HIT: %s&quot;, type(entry.value))
                return entry.value, entry.args_mutated
            else:
                LOGGER.debug(&quot;Cache object was mutated: %s&quot;, key)
                raise CachedObjectWasMutatedError()
        else:
            LOGGER.debug(&quot;Memory cache MISS: %s&quot;, key)
&gt;           raise CacheKeyNotFoundError(&quot;Key not found in mem cache&quot;)
E           streamlit.caching.CacheKeyNotFoundError: Key not found in mem cache

.venv\lib\site-packages\streamlit\caching.py:327: CacheKeyNotFoundError

During handling of the above exception, another exception occurred:

    def test_get_file_content_as_string():
        &quot;&quot;&quot;Test we can get_file_content_as_string&quot;&quot;&quot;
        # Given
        url = &quot;https://raw.githubusercontent.com/MarcSkovMadsen/awesome-streamlit/master/license.md&quot;
        # When
&gt;       result = services.get_file_content_as_string(url)

package\tests\core\test_services.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\lib\site-packages\streamlit\caching.py:544: in wrapped_func
    return get_or_set_cache()
.venv\lib\site-packages\streamlit\caching.py:526: in get_or_set_cache
    return_value = func(*args, **kwargs)
package\awesome_streamlit\core\services\other.py:33: in get_file_content_as_string
    content = file.read()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;encodings.cp1252.IncrementalDecoder object at 0x000000243FBDB208&gt;
input = b&apos;# Attribution-ShareAlike 4.0 International\r\n\r\nCreative Commons Corporation (\xe2\x80\x9cCreative Commons\xe2\x80...ragraph does not form part of the public licenses.\r\n&gt;\r\n&gt; Creative Commons may be contacted at creativecommons.org.&apos;
final = True

    def decode(self, input, final=False):
&gt;       return codecs.charmap_decode(input,self.errors,decoding_table)[0]
E       UnicodeDecodeError: &apos;charmap&apos; codec can&apos;t decode byte 0x9d in position 97: character maps to &lt;undefined&gt;

C:\Users\masma\AppData\Local\Programs\Python\Python37\lib\encodings\cp1252.py:23: UnicodeDecodeError</failure></testcase><testcase classname="package.tests.core.test_services" file="package\tests\core\test_services.py" line="18" name="test_get_file_content_as_string_httperror" time="0.344"></testcase><testcase classname="package.tests.database.test_database" file="package\tests\database\test_database.py" line="4" name="test_tags" time="0.000"></testcase><testcase classname="package.tests.database.test_database" file="package\tests\database\test_database.py" line="10" name="test_authors" time="0.000"></testcase><testcase classname="package.tests.database.test_database" file="package\tests\database\test_database.py" line="16" name="test_resources" time="0.000"></testcase><testcase classname="package.tests.database.test_settings" file="package\tests\database\test_settings.py" line="5" name="test_github" time="0.000"></testcase><testcase classname="package.tests.database.test_settings" file="package\tests\database\test_settings.py" line="10" name="test_github_raw" time="0.000"></testcase><testcase classname="package.tests.shared.test_components" file="package\tests\shared\test_components.py" line="7" name="test__reload_module" time="0.000"></testcase><testcase classname="package.tests.shared.test_components" file="package\tests\shared\test_components.py" line="12" name="test_st_write_page" time="0.000"></testcase><testcase classname="package.tests.shared.test_components" file="package\tests\shared\test_components.py" line="20" name="test_st_video_youtube" time="0.000"></testcase><testcase classname="package.tests.shared.test_components" file="package\tests\shared\test_components.py" line="28" name="test_st_multiselect" time="0.000"></testcase><testcase classname="package.tests.shared.test_components" file="package\tests\shared\test_components.py" line="50" name="test_st_title_awesome" time="0.000"></testcase><testcase classname="package.tests.shared.test_components" file="package\tests\shared\test_components.py" line="59" name="test_st_write_svg" time="0.000"></testcase><testcase classname="package.tests.shared.test_models" file="package\tests\shared\test_models.py" line="30" name="test_tag__init__" time="0.000"></testcase><testcase classname="package.tests.shared.test_models" file="package\tests\shared\test_models.py" line="35" name="test_tag__str__" time="0.000"></testcase><testcase classname="package.tests.shared.test_models" file="package\tests\shared\test_models.py" line="40" name="test_author__init__" time="0.016"></testcase><testcase classname="package.tests.shared.test_models" file="package\tests\shared\test_models.py" line="46" name="test_author__str__" time="0.000"></testcase><testcase classname="package.tests.shared.test_models" file="package\tests\shared\test_models.py" line="51" name="test_resource__init__" time="0.002"></testcase><testcase classname="package.tests.shared.test_models" file="package\tests\shared\test_models.py" line="60" name="test_resource__str__" time="0.002"></testcase><testcase classname="package.tests.shared.test_models" file="package\tests\shared\test_models.py" line="64" name="test_resource_to_markdown_bullet" time="0.002"></testcase><testcase classname="package.tests.shared.test_models" file="package\tests\shared\test_models.py" line="72" name="test_screenshot_file" time="0.002"></testcase><testcase classname="package.tests.testing.test_components" file="package\tests\testing\test_components.py" line="4" name="test_st_intro_section" time="0.004"></testcase><testcase classname="package.tests.testing.test_components" file="package\tests\testing\test_components.py" line="12" name="test_st_test_collection_section" time="0.002"></testcase><testcase classname="package.tests.testing.test_models" file="package\tests\testing\test_models.py" line="40" name="test__init__" time="0.001"></testcase><testcase classname="package.tests.testing.test_models" file="package\tests\testing\test_models.py" line="46" name="test_create_from_app_file_resource" time="0.002"></testcase><testcase classname="package.tests.testing.test_models" file="package\tests\testing\test_models.py" line="57" name="test_create_from_test_function" time="0.000"></testcase><testcase classname="package.tests.testing.test_utils" file="package\tests\testing\test_utils.py" line="11" name="test_collect_test_modules_without_submodules" time="0.002"></testcase><testcase classname="package.tests.testing.test_utils" file="package\tests\testing\test_utils.py" line="19" name="test_collect_test_modules_with_submodules" time="0.001"></testcase><testcase classname="package.tests.testing.test_utils" file="package\tests\testing\test_utils.py" line="27" name="test_collect_test_functions_in_module_without_submodules" time="0.000"></testcase><testcase classname="package.tests.testing.test_utils" file="package\tests\testing\test_utils.py" line="38" name="test_collect_test_functions_in_module_with_submodules" time="0.000"></testcase><testcase classname="package.tests.testing.test_utils" file="package\tests\testing\test_utils.py" line="48" name="test_load_module_from_path" time="0.002"><skipped message="Not ImplementedError" type="pytest.xfail"></skipped></testcase><testcase classname="package.tests.testing.test_module_example_folder.test_module_example_file" file="package\tests\testing\test_module_example_folder\test_module_example_file.py" line="3" name="test_st_function_1" time="0.007"></testcase><testcase classname="package.tests.testing.test_module_example_folder.test_module_example_file" file="package\tests\testing\test_module_example_folder\test_module_example_file.py" line="7" name="test_st_function_2" time="0.002"></testcase><testcase classname="package.tests.testing.test_module_example_folder.test_module_example_file" file="package\tests\testing\test_module_example_folder\test_module_example_file.py" line="11" name="test_functions" time="0.001"></testcase></testsuite></testsuites>